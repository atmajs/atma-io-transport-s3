// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../atma-io/transport/custom

declare module 'atma-io-transport-s3' {
    import { ITransport } from 'atma-io/transport/custom';
    import { S3File } from 'atma-io-transport-s3/S3File';
    import { S3Directory } from 'atma-io-transport-s3/S3Directory';
    export class S3Transport implements ITransport {
        File: S3File;
        Directory: S3Directory;
        setDriver($client: any): void;
        setOptions(options: any): void;
    }
}

declare module 'atma-io-transport-s3/S3File' {
    import { IFileTransport } from 'atma-io/transport/custom';
    export class S3File implements IFileTransport {
        saveAsync(path: any, content: any, options: any, cb: any): void;
        copyAsync(from: string, to: string, cb: (err: Error) => void): void;
        existsAsync(path: any, cb: (err: Error, x?: boolean) => void): void;
        readAsync(path: any, encoding: any, cb: (err: Error, x?: string | Buffer) => void): void;
        removeAsync(path: any, cb: (err: Error) => void): void;
        renameAsync(path: any, filename: any, cb: any): void;
        exists(path: any): boolean;
        copy(from: any, to: any): void;
        read(path: any, encoding?: any): string | Buffer;
        remove(path: any): boolean;
        rename(path: any, filename: any): void;
        save(path: string, content: any, options?: any): void;
    }
}

declare module 'atma-io-transport-s3/S3Directory' {
    import { IDirectoryTransport } from 'atma-io/transport/custom';
    export class S3Directory implements IDirectoryTransport {
        ensure(path: any): string;
        ensureAsync(path: any, cb: any): void;
        ceateSymlink(source: string, target: string): void;
        exists(path: any): boolean;
        existsAsync(path: any, cb: (err: Error, x?: boolean) => void): void;
        readFiles(path: any, patterns?: any, excludes?: any, data?: any): string[];
        readFilesAsync(path: any, patternsOrCb?: any, excludesOrCb?: any, dataOrCb?: any, Cb?: any): void;
        remove(path: any): boolean;
        removeAsync(path: any, cb: (err?: Error) => void): void;
        rename(oldPath: any, newPath: any): void;
        renameAsync(oldPath: any, newPath: any, cb: (err: Error) => void): void;
    }
}

